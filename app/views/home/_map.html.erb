<div class="container my-5" id="map-container">
  <div>
    <div class="legend-container">
      <h3>Legends</h3>
      <div class="legend-item">
        <div class="legend-icon" ><img src="/images/barangay-icon.png" /></div>
        <div class="legend-text">
          <p>Barangay</p>
        </div>
      </div>
      <div class="legend-item">
        <div class="legend-icon" ><img src="/images/Evacuation.png" /></div>
        <div class="legend-text">
          <p>Evacuation Area</p>
        </div>
      </div>
      <div class="legend-item">
        <div class="legend-icon" ><img src="/images/Tsunami-High.png" /></div>
        <div class="legend-text">
          <p>Tsunami</p>
        </div>
        <div class="legend-color" style="background-color: #135998;"></div>
      </div>
      <div class="legend-item">
        <div class="legend-icon" ><img src="/images/flood-low-risk.png" /></div>
        <div class="legend-text">
          <p>Floods</p>
        </div>
        <div class="legend-color" style="background-color: #964B00;"></div>
      </div>
      <div class="legend-item">
        <div class="legend-icon" ><img src="/images/storm_surge-low-risk.png" /></div>
        <div class="legend-text">
          <p>Storm Surge</p>
        </div>
        <div class="legend-color" style="background-color: #FF0000;"></div>
      </div>
      <div class="legend-item">
        <div class="ml-4 pl-3 legend-text">
          <p>LOW RISK</p>
        </div>
        <div class="legend-color" style="background-color: yellow;"></div>
      </div>
      <div class="legend-item">
        <div class="ml-4 pl-3 legend-text">
          <p>MEDIUM RISK</p>
        </div>
        <div class="legend-color" style="background-color: orange;"></div>
      </div>
      <div class="legend-item">
        <div class="ml-4 pl-3 legend-text">
          <p>HIGH RISK</p>
        </div>
        <div class="legend-color" style="background-color: red;"></div>
      </div>
    </div>
    <div>
      <a href="#map-container" id="barangay-filter" class="map-filters active">BARANGAY</a>
      <a href="#map-container" id="evacuation-filter" class="map-filters active">EVACUATION AREA</a>
      <a href="#map-container" id="tsunami-filter" class="map-filters active">TSUNAMI</a>
      <a href="#map-container" id="flood-filter" class="map-filters active">FLOODS</a>
      <a href="#map-container" id="storm-surge-filter" class="map-filters active">STORM SURGES</a>
    </div>
    <div>
      <a href="#map-container" id="low-filter" class="map-filters active">LOW RISK</a>
      <a href="#map-container" id="medium-filter" class="map-filters active">MEDIUM RISK</a>
      <a href="#map-container" id="high-filter" class="map-filters active">HIGH RISK</a>
    </div>
    <a href="#map-container" id="show-location" class="map-filters active">GET CURRENT LOCATION</a>
    <a href="#map-container" id="show-routes" class="map-filters active">SHOW NEXT ROUTE TO EVACUATION</a>
    <div id="map">
      <h1>Loading...</h1>
    </div>
    <script async
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC8KVq2028NT4tSCAt75NEPKXxzrhQAXVI&callback=initMap"></script>
    <script>
      let map;
      let barangays = [];
      let tsunamis = [];
      let evacuations = [];
      let floods = [];
      let storm_surges = [];
      
      let barangays_visible = true;
      let tsunamis_visible = true;
      let evacuations_visible = true;
      let floods_visible = true;
      let storm_surges_visible = true;
      let low_visible = true;
      let medium_visible = true;
      let high_visible = true;
      
      let latitude = null
      let longitude = null
      currentLocationMarker = null
      
      var directionsService = null;
      var directionsDisplay = null;
      
      var currentRouteIndex = null
      
      function initMap() {
        initFilters()
        resetMap()
        initShowRoutes()
      }
      
      const initShowRoutes = () => {
        const routeButton = document.getElementById("show-routes");
        routeButton.addEventListener('click', (e) => {
          e.preventDefault()
          showRoutes()
        })
        const currentLocationButton = document.getElementById("show-location");
        currentLocationButton.addEventListener('click', (e) => {
          console.log("current location")
          getLocation()
        })
      }
      
      function getLocation() {
        console.log("Getting location...")
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(showPosition);
        } else {
          alert("Cannot get your location")
          console.log({
            error: "Geolocation is not supported by this browser."
          });
        }
      }
      
      function showPosition(position) {
        console.log("Location found!")
        if(latitude == null ){
          latitude = position.coords.latitude;
          longitude = position.coords.longitude;
        }
        const content = "Current location"
        const icon = {
          url: "/images/current_location_icon.png",
          scaledSize: new google.maps.Size(36, 36),
        };
      
        currentLocationMarker = displayMarker(`${latitude}, ${longitude}`, content, icon, true);
        map.setCenter(new google.maps.LatLng(latitude, longitude));
        map.setZoom(10);
        google.maps.event.addListener(currentLocationMarker, 'dragend', function()
        {
          latitude = currentLocationMarker.getPosition().lat()
          longitude = currentLocationMarker.getPosition().lng()
          console.log(`${latitude}, ${longitude}`)
        });
      }
      
      const showRoutes = async () => {
        if(evacuations.length == 0){
          alert("No evacuation areas found")
          return
        }
        if(currentRouteIndex == null){
          currentRouteIndex = 0
        }
        directionsService = new google.maps.DirectionsService();
        directionsDisplay = new google.maps.DirectionsRenderer();
      
        let item = evacuations[currentRouteIndex]
        var request = {
          travelMode: google.maps.TravelMode.DRIVING
        };
        directionsDisplay.setMap(map);
        directionsDisplay.setOptions( { suppressMarkers: true } );
        console.log("Showing routes...")
        console.log({evacuations})
      
        request.origin =  new google.maps.LatLng(latitude, longitude)
        request.destination =  new google.maps.LatLng(item.latlong.split(',')[0], item.latlong.split(',')[1])
        directionsService.route(request, function(result, status) {
          if (status == google.maps.DirectionsStatus.OK) {
            directionsDisplay.setDirections(result);
          }
        });
        currentRouteIndex = (currentRouteIndex + 1) % evacuations.length
      }
      
      function resetMap() {
        const mapContainer = document.getElementById("map");
        if (mapContainer) {
          map = new google.maps.Map(mapContainer, {
            center: { lat: latitude || 16.019097656537834, lng: longitude || 120.23156633657322 },
            zoom: 13,
          });
          initMapData();
          getLocation()
        }
      }
      
      const showActiveFilter = () => {
        const barangayFilter = document.getElementById("barangay-filter");
        const tsunamiFilter = document.getElementById("tsunami-filter");
        const floodFilter = document.getElementById("flood-filter");
        const stormSurgeFilter = document.getElementById("storm-surge-filter");
        const evacuationFilter = document.getElementById("evacuation-filter");
        const lowFilter = document.getElementById("low-filter");
        const mediumSurgeFilter = document.getElementById("medium-filter");
        const highFilter = document.getElementById("high-filter");
      
        if (low_visible) {
          lowFilter.classList.add("active")
        }else{
          lowFilter.classList.remove("active")
        }
      
        if (medium_visible) {
          mediumSurgeFilter.classList.add("active")
        }else{
          mediumSurgeFilter.classList.remove("active")
        }
      
        if (high_visible) {
          highFilter.classList.add("active")
        }else{
          highFilter.classList.remove("active")
        }
      
        if (barangays_visible) {
          barangayFilter.classList.add("active")
        }else{
          barangayFilter.classList.remove("active")
        }
      
        if (tsunamis_visible) {
          tsunamiFilter.classList.add("active")
        }else{
          tsunamiFilter.classList.remove("active")
        }
      
        if (floods_visible) {
          floodFilter.classList.add("active")
        }else{
          floodFilter.classList.remove("active")
        }
      
        if (evacuations_visible) {
          evacuationFilter.classList.add("active")
        }else{
          evacuationFilter.classList.remove("active")
        }
      
        if (storm_surges_visible) {
          stormSurgeFilter.classList.add("active")
        }else{
          stormSurgeFilter.classList.remove("active")
        }
      
      }
      
      const initFilters = () => {
        const barangayFilter = document.getElementById("barangay-filter");
        const tsunamiFilter = document.getElementById("tsunami-filter");
        const floodFilter = document.getElementById("flood-filter");
        const stormSurgeFilter = document.getElementById("storm-surge-filter");
        const evacuationFilter = document.getElementById("evacuation-filter");
        const lowFilter = document.getElementById("low-filter");
        const mediumSurgeFilter = document.getElementById("medium-filter");
        const highFilter = document.getElementById("high-filter");
      
        lowFilter.addEventListener("click", (e) => {
          e.preventDefault();
          resetMap()
          low_visible = !low_visible;
          showActiveFilter()
          displayData();
        });
      
        mediumSurgeFilter.addEventListener("click", (e) => {
          e.preventDefault();
          resetMap()
          medium_visible = !medium_visible;
          showActiveFilter()
          displayData();
        });
      
        highFilter.addEventListener("click", (e) => {
          e.preventDefault();
          resetMap()
          high_visible = !high_visible;
          showActiveFilter()
          displayData();
        });
      
        barangayFilter.addEventListener("click", (e) => {
          e.preventDefault();
          resetMap()
          barangays_visible = !barangays_visible;
          showActiveFilter()
          displayData();
        });
      
        tsunamiFilter.addEventListener("click", (e) => {
          e.preventDefault();
          resetMap()
          tsunamis_visible = !tsunamis_visible;
          showActiveFilter()
          displayData();
        });
      
        floodFilter.addEventListener("click", (e) => {
          e.preventDefault();
          resetMap()
          floods_visible = !floods_visible;
          showActiveFilter()
          displayData();
        });
      
        stormSurgeFilter.addEventListener("click", (e) => {
          e.preventDefault();
          resetMap()
          storm_surges_visible = !storm_surges_visible;
          showActiveFilter()
          displayData();
        });
      
        evacuationFilter.addEventListener("click", (e) => {
          e.preventDefault();
          resetMap()
          evacuations_visible = !evacuations_visible;
          showActiveFilter()
          displayData();
        });
      }
      
      
      const initMapData = async () => {
        await fetchAllBarangays();
        await fetchAllTsunamis();
        await fetchAllEvacuation();
        await fetchAllFloods();
        await fetchAllStormSurges();
        await displayData();
      };
      
      const fetchAllBarangays = () => {
        console.log("fetching barangays");
        return fetch("/api/v2/map_data/barangay")
          .then((res) => {
            console.log({ res });
            return res.json();
          })
      
          .then((res) => {
            console.log("displaying barangay", res);
            barangays = res;
          })
          .catch((err) => {
            console.log({ err });
          });
      };
      
      const fetchAllTsunamis = () => {
        console.log("fetching tsunamis");
        return fetch("/api/v2/map_data/tsunami")
          .then((res) => {
            console.log({ res });
            return res.json();
          })
      
          .then((res) => {
            console.log("displaying tsunami", res);
            tsunamis = res;
          })
          .catch((err) => {
            console.log({ err });
          });
      };
      
      const fetchAllFloods = () => {
        console.log("fetching floods");
        return fetch("/api/v2/map_data/flood")
          .then((res) => {
            console.log({ res });
            return res.json();
          })
      
          .then((res) => {
            console.log("displaying flood", res);
            floods = res;
          })
          .catch((err) => {
            console.log({ err });
          });
      };
      
      const fetchAllStormSurges = () => {
        console.log("fetching storm_surges");
        return fetch("/api/v2/map_data/storm_surge")
          .then((res) => {
            console.log({ res });
            return res.json();
          })
      
          .then((res) => {
            console.log("displaying storm_surge", res);
            storm_surges = res;
          })
          .catch((err) => {
            console.log({ err });
          });
      };
      
      const fetchAllEvacuation = () => {
        console.log("fetching evacuations");
        return fetch("/api/v2/map_data/evacuation")
          .then((res) => {
            console.log({ res });
            return res.json();
          })
      
          .then((res) => {
            console.log("displaying evacuation", res);
            evacuations = res;
          })
          .catch((err) => {
            console.log({ err });
          });
      };
      
      const displayData = () => {
        if(barangays_visible) {
          barangays.map((item) => {
            const content = `${item.name} | ${item.flood_level_status}`;
            if (item.latlong) {
              const icon = {
                url: "/images/barangay-icon.png",
                scaledSize: new google.maps.Size(36, 36),
              };
              displayMarker(item.latlong, content, icon);
            }
          });
        }
        if(evacuations_visible) {
          evacuations.map((item) => {
            const content = `${item.name}`;
            if (item.latlong) {
              const icon = {
                url: "/images/Evacuation.png",
                scaledSize: new google.maps.Size(60, 60),
              };
              displayMarker(item.latlong, content, icon);
            }
          });
        }
      
        if(tsunamis_visible){
          tsunamis.map((item) => {
            const content = `Tsunami area | ${item.risk_level}`;
      
            if(item.risk_level == "LOW RISK"){
              if(!low_visible) return
            }else if(item.risk_level == "MEDIUM RISK"){
              if(!medium_visible) return
            }else if(item.risk_level == "HIGH RISK"){
              if(!high_visible) return
            }
      
            if (item.latlong) {
              let imageUrl = "/images/Tsunami-Low.png";
              switch (item.risk_level) {
                case "MEDIUM RISK":
                  imageUrl = "/images/Tsunami-Medium.png";
                  break;
                case "HIGH RISK":
                  imageUrl = "/images/Tsunami-High.png";
                  break;
              }
              const icon = {
                url: imageUrl,
                scaledSize: new google.maps.Size(36, 36),
              };
              displayMarker(item.latlong, content, icon);
      
            }
      
            if(item.coordinates != null){
              displayPolygon(coordinateParser(item.coordinates), "#135998")
            }
          });
        }
      
        if(floods_visible){
          floods.map((item) => {
            if(item.risk_level == "LOW RISK"){
              if(!low_visible) return
            }else if(item.risk_level == "MEDIUM RISK"){
              if(!medium_visible) return
            }else if(item.risk_level == "HIGH RISK"){
              if(!high_visible) return
            }
            const content = `Flood area | ${item.risk_level}`;
            if (item.latlong) {
              let imageUrl = "/images/flood-low-risk.png";
              switch (item.risk_level) {
                case "MEDIUM RISK":
                  imageUrl = "/images/flood-medium-risk.png";
                  break;
                case "HIGH RISK":
                  imageUrl = "/images/flood-high-risk.png";
                  break;
              }
              const icon = {
                url: imageUrl,
                scaledSize: new google.maps.Size(60, 60),
              };
              displayMarker(item.latlong, content, icon);
            }
            if(item.coordinates != null){
              displayPolygon(coordinateParser(item.coordinates), "#964B00")
            }
          });
        }
      
        if(storm_surges_visible){
          if(item.risk_level == "LOW RISK"){
            if(!low_visible) return
          }else if(item.risk_level == "MEDIUM RISK"){
            if(!medium_visible) return
          }else if(item.risk_level == "HIGH RISK"){
            if(!high_visible) return
          }
          storm_surges.map((item) => {
            const content = `Storm Surge area | ${item.risk_level}`;
            if (item.latlong) {
              let imageUrl = "/images/storm_surge-low-risk.png";
              switch (item.risk_level) {
                case "MEDIUM RISK":
                  imageUrl = "/images/storm_surge-medium-risk.png";
                  break;
                case "HIGH RISK":
                  imageUrl = "/images/storm_surge-high-risk.png.png";
                  break;
              }
              const icon = {
                url: imageUrl,
                scaledSize: new google.maps.Size(60, 60),
              };
              displayMarker(item.latlong, content, icon);
            }
            if(item.coordinates != null){
              displayPolygon(coordinateParser(item.coordinates))
            }
          });
        }
      };
      
      const displayMarker = (latlong, content, icon, draggable = false) => {
        const position = {
          lat: parseFloat(latlong.split(",")[0]),
          lng: parseFloat(latlong.split(",")[1]),
        };
        const marker = new google.maps.Marker({
          position,
          map,
          icon,
          draggable
        });
        const infoWindow = new google.maps.InfoWindow();
        marker.addListener("click", () => {
          infoWindow.close();
          infoWindow.setContent(content);
          infoWindow.open(marker.getMap(), marker);
        });
        return marker
      };
      
      
      const displayPolygon = (coordinates, color = "#FF0000") => {
        console.log({coordinates});
      
        const bermudaTriangle = new google.maps.Polygon({
          paths: coordinates,
          strokeColor: color,
          strokeOpacity: 0.8,
          strokeWeight: 2,
          fillColor: color,
          fillOpacity: 0.35,
        });
      
        bermudaTriangle.setMap(map);
      }
      
      const coordinateParser = (coordinateString) => {
        let coordinates = []
        try {
          let data = JSON.parse(coordinateString)
          data.forEach(item => {
            coordinates.push({ lat: parseFloat(item.split(',')[0]), lng: parseFloat(item.split(',')[1]) })
          })
        } catch (error) {
          console.log("error parsing string", coordinateString, error)
        }
        return coordinates
      }
    </script>
  </div>
